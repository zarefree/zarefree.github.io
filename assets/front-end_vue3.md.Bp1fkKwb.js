import{_ as a,c as i,o as t,ag as n}from"./chunks/framework.BmLMQRXF.js";const o=JSON.parse('{"title":"Vue3","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/vue3.md","filePath":"front-end/vue3.md","lastUpdated":1743468724000}'),h={name:"front-end/vue3.md"};function e(l,s,k,p,r,d){return t(),i("div",null,s[0]||(s[0]=[n(`<h1 id="vue3" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;Vue3&quot;">​</a></h1><h2 id="watch-和-watcheffect-的区别" tabindex="-1">watch 和 watchEffect 的区别 <a class="header-anchor" href="#watch-和-watcheffect-的区别" aria-label="Permalink to &quot;watch 和 watchEffect 的区别&quot;">​</a></h2><h3 id="核心差异对比" tabindex="-1">核心差异对比 <a class="header-anchor" href="#核心差异对比" aria-label="Permalink to &quot;核心差异对比&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th>watch</th><th>watchEffect</th></tr></thead><tbody><tr><td><strong>依赖收集方式</strong></td><td>需显式声明监听对象</td><td>自动收集函数内的响应式依赖</td></tr><tr><td><strong>执行时机</strong></td><td>默认不立即执行（可配置 immediate）</td><td>立即执行</td></tr><tr><td><strong>新旧值访问</strong></td><td>可获取新旧值</td><td>无法获取旧值</td></tr><tr><td><strong>停止监听</strong></td><td>返回停止函数</td><td>返回停止函数</td></tr><tr><td><strong>适用场景</strong></td><td>精确控制监听目标时</td><td>自动追踪多个依赖时</td></tr></tbody></table><h3 id="_1-watch" tabindex="-1">1. watch <a class="header-anchor" href="#_1-watch" aria-label="Permalink to &quot;1. watch&quot;">​</a></h3><h4 id="特性" tabindex="-1">特性 <a class="header-anchor" href="#特性" aria-label="Permalink to &quot;特性&quot;">​</a></h4><ul><li><strong>显式声明</strong>：需要明确指定监听的目标</li><li><strong>延迟执行</strong>：默认只在数据变化时触发</li><li><strong>精确控制</strong>：支持深度监听（deep）、立即执行（immediate）等配置</li></ul><h4 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听单个源</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;新值:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, newVal, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;旧值:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, oldVal);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听多个源</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([count, name], ([</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;多个值变化:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, newCount, newName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,9)]))}const c=a(h,[["render",e]]);export{o as __pageData,c as default};
